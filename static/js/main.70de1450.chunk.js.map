{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","input","apikey","city","weather","temperature","time","date","show","showerror","option","degree","inputEmpty","zipin","alert","myClick","zipInput","document","getElementById","value","setState","setTimeout","getWeather","myKeyPress","keypress","keyCode","optionChange","event","target","fetch","then","result","ok","json","console","log","name","main","Math","round","temp","getTimezone","catch","error","zipName","zipToTz","lookup","timeNow","Moment","tz","format","class","id","type","placeholder","onKeyUp","onClick","checked","this","onChange","style","display","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.70de1450.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Component} from 'react';\nimport Moment from 'moment';\nimport 'moment-timezone';\nimport zipToTz from'zipcode-to-timezone';\n//import 'bootstrap/dist/css/bootstrap.css';\n//import 'bootstrap dist/js/bootstream.js';\n\n\nclass App extends Component {\n  state = {  \n    input: '',\n    apikey: '549800580d6025f13c9688f4be033ff6',\n    city: '',\n    weather:'',\n    temperature:'',\n    time:'',\n    date:'',\n    show: false,\n    showerror: false,\n    option: 'imperial',\n    degree: '°F'\n  }\n\n  inputEmpty =(zipin) => {\n    if(zipin === \"\"){\n      alert(\"Please enter Zip\");\n      return true;\n    }else {\n      return false;\n    };\n  }\n\n  myClick =() => {\n    let zipInput = document.getElementById('input').value;\n    if (this.inputEmpty(zipInput) === false){\n      this.setState({\n      input: zipInput,\n    })\n    setTimeout(()=> {\n      this.getWeather();\n    }, 100);\n    }\n  } \n\n  myKeyPress =(keypress) => {\n    if (keypress.keyCode == 13){\n      this.myClick()\n    }\n  }\n\n  optionChange =(event) =>{\n    this.setState({\n      option: event.target.value ,\n    })\n    setTimeout(()=> {\n      if (this.state.option == 'imperial'){\n        this.setState({\n          degree: '°F'\n      })\n    } else {\n      this.setState({\n        degree: '°C'\n      })\n    }\n    }, 100)\n    \n    this.myClick();\n  }\n\n  getWeather = () => {\n     fetch('https://api.openweathermap.org/data/2.5/weather?zip='+this.state.input+',us&units='+this.state.option+'&appid='+this.state.apikey)\n     .then((result) => {\n       if (!result.ok){\n         this.setState({\n           show: false,\n           showerror: true,\n         })\n       } else {\n         return result.json();\n       }\n        \n     })\n     .then((result) => {\n        console.log(result);\n\n        this.setState({\n          city: result.name,\n          weather: result.weather[0].main,\n          temperature: Math.round(result.main.temp),\n          show: true,\n          showerror: false,\n     })\n\n     this.getTimezone();\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n  }\n\n  getTimezone=() => {\n    let zipName = zipToTz.lookup(this.state.input)\n    let timeNow = Moment().tz(zipName).format('dddd, MMMM Do YYYY,hh:mm:ss a');\n    \n      this.setState({\n        time: timeNow, \n      })\n  }\n\n  render() { \n    return (\n      <>\n      <div>\n        <h1 class = \"flicker-in-1\"> U.S.A Weather App</h1>\n        <input id ={\"input\"} type= \"text\" placeholder=\"Enter Zip\" onKeyUp ={(keypress) =>{this.myKeyPress(keypress)}} />\n        <button id ={\"inputBtn\"} onClick={()=>{this.myClick()}}>Submit</button>\n      </div>\n\n  <div>\n    \n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"imperial\"\n              checked={this.state.option === \"imperial\"}\n              onChange={this.optionChange}\n            />\n            Fahrenheit (°F)\n          </label>\n        </div>\n        \n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"metric\"\n              checked={this.state.option === \"metric\"}\n              onChange={this.optionChange}\n            />\n            Celsius (°C)\n          </label>\n        </div>\n      \n    </div>\n\n      <div style = {{ display: (this.state.show ? \"block\" : \"none\")}}>\n          <h4>\n          City: {this.state.city}<br></br>\n          Time: {this.state.time}<br></br>\n          Weather is {this.state.weather} <br></br>\n          with a temperature of {this.state.temperature} {this.state.degree}<br></br>\n          </h4>\n      </div>\n      <div style = {{ display: (this.state.showerror ? \"block\" : \"none\")}}> \n        <h2> Invalid Zip</h2>\n      </div>\n    </>  \n    );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}